---
alwaysApply: true
---

# Ars0n Framework v2 - Development Rules

## Core Development Principles

### 1. Security-First Development
- **SECURITY_RULE_01**: All user inputs MUST be validated and sanitized before processing
- **SECURITY_RULE_02**: Never expose internal error messages or stack traces to end users
- **SECURITY_RULE_03**: Use parameterized queries exclusively - no string concatenation for SQL
- **SECURITY_RULE_04**: Store sensitive data (API keys, credentials) in environment variables only
- **SECURITY_RULE_05**: Implement proper access controls and authentication for all endpoints
- **SECURITY_RULE_06**: Log security events and failed authentication attempts
- **SECURITY_RULE_07**: Regular dependency updates and vulnerability scanning required

### 2. Educational Philosophy Integration
- **EDUCATION_RULE_01**: Every security tool integration MUST include educational context
- **EDUCATION_RULE_02**: "Help Me Learn" components required for all major features
- **EDUCATION_RULE_03**: Code comments must explain the "why" not just the "what"
- **EDUCATION_RULE_04**: Error messages should be educational and guide users to solutions
- **EDUCATION_RULE_05**: Documentation must be accessible to security beginners

### 3. Quality Standards
- **QUALITY_RULE_01**: Zero TODOs or placeholders in production code
- **QUALITY_RULE_02**: All functions must have comprehensive error handling
- **QUALITY_RULE_03**: Unit tests required for all utility functions and parsers
- **QUALITY_RULE_04**: Integration tests required for all tool integrations
- **QUALITY_RULE_05**: Code reviews mandatory for all changes
- **QUALITY_RULE_06**: Automated linting and formatting compliance required

## Language-Specific Standards

### Go Backend Standards

#### Code Organization
```go
// Package structure
package main

import (
    // Standard library first
    "context"
    "fmt"
    "net/http"
    
    // Third-party packages
    "github.com/gorilla/mux"
    
    // Local packages
    "./models"
    "./utils"
)
```

#### Function Documentation
```go
// InitiateAmassEnumScan starts an Amass enumeration scan for the given target
// It validates the target, creates a Docker container, and returns the scan ID
// Returns error if target validation fails or container creation fails
func InitiateAmassEnumScan(target string, config AmassConfig) (string, error) {
    // Implementation
}
```

#### Error Handling
```go
// REQUIRED: Structured error handling
func (s *ScanService) ExecuteTool(toolName string, params ToolParams) (*Result, error) {
    if err := s.validateParams(params); err != nil {
        return nil, fmt.Errorf("parameter validation failed: %w", err)
    }
    
    result, err := s.runTool(toolName, params)
    if err != nil {
        // Log error internally
        s.logger.Error("tool execution failed", 
            "tool", toolName, 
            "error", err,
            "params", params)
        
        // Return user-friendly error
        return nil, fmt.Errorf("scan execution failed: %s", getUserFriendlyError(err))
    }
    
    return result, nil
}
```

#### Naming Conventions
- **Functions**: camelCase for private, PascalCase for exported
- **Variables**: camelCase (e.g., `scanResults`, `targetDomain`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `MAX_SCAN_TIMEOUT`)
- **Structs**: PascalCase (e.g., `ScanResult`, `TargetConfig`)
- **Interfaces**: PascalCase with "er" suffix (e.g., `Scanner`, `Parser`)

### React Frontend Standards

#### Component Structure
```jsx
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';

/**
 * ScopeTargetDetails - Displays detailed information about a scope target
 * Includes scan history, asset counts, and ROI analysis
 */
const ScopeTargetDetails = ({ targetId, onUpdate }) => {
    const [targetData, setTargetData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Component logic here

    return (
        <div className="scope-target-details">
            {/* Component JSX */}
        </div>
    );
};

ScopeTargetDetails.propTypes = {
    targetId: PropTypes.string.isRequired,
    onUpdate: PropTypes.func
};

export default ScopeTargetDetails;
```

#### State Management
```jsx
// REQUIRED: Proper state management with error handling
const [state, setState] = useState({
    data: null,
    loading: false,
    error: null
});

const handleAsyncOperation = async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));
    
    try {
        const result = await apiCall();
        setState(prev => ({ ...prev, data: result, loading: false }));
    } catch (error) {
        setState(prev => ({ 
            ...prev, 
            error: error.message, 
            loading: false 
        }));
    }
};
```

#### Naming Conventions
- **Components**: PascalCase (e.g., `AmassEnumConfigModal`)
- **Functions**: camelCase (e.g., `handleScanStart`, `parseResults`)
- **Variables**: camelCase (e.g., `scanStatus`, `targetDomains`)
- **Files**: PascalCase for components, camelCase for utilities

### Python AI Service Standards

#### Function Documentation
```python
def process_security_query(query: str, context: dict) -> dict:
    """
    Process a security-related query using AI models.
    
    Args:
        query (str): The user's security question
        context (dict): Additional context including scan results
        
    Returns:
        dict: Processed response with educational content
        
    Raises:
        ValueError: If query is invalid or context missing
        APIError: If external API calls fail
    """
    # Implementation
```

#### Error Handling
```python
# REQUIRED: Comprehensive error handling
try:
    response = openai_client.create_completion(prompt)
except openai.APIError as e:
    logger.error(f"OpenAI API error: {e}")
    raise AIServiceError("Unable to process query at this time")
except Exception as e:
    logger.error(f"Unexpected error in AI service: {e}")
    raise AIServiceError("Internal service error")
```

## Database Standards

### Schema Design
```sql
-- REQUIRED: Proper indexing and constraints
CREATE TABLE scope_targets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    target_type VARCHAR(50) NOT NULL CHECK (target_type IN ('company', 'wildcard', 'url')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Indexes for performance
    INDEX idx_scope_targets_type (target_type),
    INDEX idx_scope_targets_created (created_at)
);
```

### Query Standards
```go
// REQUIRED: Use parameterized queries
const query = `
    SELECT id, name, target_type, created_at 
    FROM scope_targets 
    WHERE target_type = $1 AND created_at > $2
    ORDER BY created_at DESC
    LIMIT $3
`
rows, err := db.Query(query, targetType, startDate, limit)
```

## API Design Standards

### Endpoint Naming
- **Resources**: Plural nouns (e.g., `/api/targets`, `/api/scans`)
- **Actions**: HTTP verbs (GET, POST, PUT, DELETE)
- **Nested Resources**: Clear hierarchy (e.g., `/api/targets/{id}/scans`)

### Request/Response Format
```json
{
    "status": "success|error",
    "data": {
        // Response payload
    },
    "message": "Human-readable message",
    "timestamp": "2024-12-19T10:30:00Z"
}
```

### Error Responses
```json
{
    "status": "error",
    "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid target format provided",
        "details": {
            "field": "target",
            "provided": "invalid-domain",
            "expected": "Valid domain or IP address"
        }
    },
    "timestamp": "2024-12-19T10:30:00Z"
}
```

## Docker & Container Standards

### Dockerfile Best Practices
```dockerfile
# Use specific version tags
FROM golang:1.21-alpine AS builder

# Create non-root user
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy dependencies first (layer caching)
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build application
RUN CGO_ENABLED=0 GOOS=linux go build -o main .

# Final stage
FROM alpine:latest
RUN adduser -D -s /bin/sh appuser
USER appuser
COPY --from=builder /app/main /app/main
EXPOSE 8080
CMD ["/app/main"]
```

### Container Security
- **CONTAINER_RULE_01**: Always use non-root users in containers
- **CONTAINER_RULE_02**: Use specific version tags, never `latest`
- **CONTAINER_RULE_03**: Minimize container surface area (alpine base images)
- **CONTAINER_RULE_04**: Scan containers for vulnerabilities before deployment
- **CONTAINER_RULE_05**: Use multi-stage builds to reduce final image size

## Testing Standards

### Unit Testing
```go
// REQUIRED: Comprehensive unit tests
func TestValidateTarget(t *testing.T) {
    tests := []struct {
        name    string
        target  string
        wantErr bool
    }{
        {"valid domain", "example.com", false},
        {"valid subdomain", "sub.example.com", false},
        {"invalid format", "not-a-domain", true},
        {"empty target", "", true},
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            err := ValidateTarget(tt.target)
            if (err != nil) != tt.wantErr {
                t.Errorf("ValidateTarget() error = %v, wantErr %v", err, tt.wantErr)
            }
        })
    }
}
```

### Integration Testing
```go
// REQUIRED: Integration tests for tool workflows
func TestAmassIntegration(t *testing.T) {
    // Setup test container
    container := setupTestContainer(t, "amass")
    defer container.Cleanup()
    
    // Test execution
    result, err := ExecuteAmassEnum("test.com", AmassConfig{})
    require.NoError(t, err)
    
    // Verify results
    assert.NotEmpty(t, result.Subdomains)
    assert.Equal(t, "completed", result.Status)
}
```

## Documentation Standards

### Code Documentation
- **DOC_RULE_01**: All exported functions must have documentation comments
- **DOC_RULE_02**: Complex algorithms must include implementation explanations
- **DOC_RULE_03**: API endpoints must include example requests/responses
- **DOC_RULE_04**: Security considerations must be documented
- **DOC_RULE_05**: Educational content must be beginner-friendly

### README Standards
```markdown
# Component Name

## Purpose
Brief description of what this component does and why it exists.

## Usage
Code examples showing how to use the component.

## Configuration
Required environment variables and configuration options.

## Security Considerations
Any security implications or requirements.

## Educational Notes
Background information for learning purposes.
```

## Performance Standards

### Backend Performance
- **PERF_RULE_01**: API endpoints must respond within 2 seconds
- **PERF_RULE_02**: Database queries must be optimized and indexed
- **PERF_RULE_03**: Use connection pooling for database connections
- **PERF_RULE_04**: Implement caching for frequently accessed data
- **PERF_RULE_05**: Monitor and log performance metrics

### Frontend Performance
- **PERF_RULE_06**: Components must load within 1 second
- **PERF_RULE_07**: Implement lazy loading for large datasets
- **PERF_RULE_08**: Optimize bundle size and implement code splitting
- **PERF_RULE_09**: Use React.memo for expensive components
- **PERF_RULE_10**: Minimize re-renders through proper state management

## Security Tool Integration Standards

### Tool Wrapper Pattern
```go
type ToolExecutor interface {
    Execute(params ToolParams) (*ToolResult, error)
    Validate(params ToolParams) error
    Parse(output []byte) (*StructuredResult, error)
}

type AmassExecutor struct {
    docker *DockerClient
    logger *Logger
}

func (a *AmassExecutor) Execute(params ToolParams) (*ToolResult, error) {
    // Validate parameters
    if err := a.Validate(params); err != nil {
        return nil, err
    }
    
    // Execute in container
    output, err := a.docker.Run("amass", params.ToArgs())
    if err != nil {
        return nil, fmt.Errorf("amass execution failed: %w", err)
    }
    
    // Parse results
    structured, err := a.Parse(output)
    if err != nil {
        return nil, fmt.Errorf("result parsing failed: %w", err)
    }
    
    return &ToolResult{
        Raw:        output,
        Structured: structured,
        Status:     "completed",
    }, nil
}
```

### Result Parsing Standards
- **PARSE_RULE_01**: Always preserve raw tool output for debugging
- **PARSE_RULE_02**: Implement robust parsing with error recovery
- **PARSE_RULE_03**: Validate parsed data before database insertion
- **PARSE_RULE_04**: Handle partial results gracefully
- **PARSE_RULE_05**: Include parsing confidence scores when applicable

## Git & Version Control Standards

### Commit Standards
```
type(scope): brief description

Detailed explanation of changes if needed.

- List specific changes
- Reference issues if applicable

Closes #123
```

### Branch Naming
- **feature/**: New features (e.g., `feature/nuclei-integration`)
- **bugfix/**: Bug fixes (e.g., `bugfix/amass-parser-error`)
- **hotfix/**: Critical fixes (e.g., `hotfix/security-vulnerability`)
- **docs/**: Documentation updates (e.g., `docs/api-examples`)

### Code Review Requirements
- **REVIEW_RULE_01**: All changes require at least one review
- **REVIEW_RULE_02**: Security changes require security expert review
- **REVIEW_RULE_03**: Architecture changes require architecture review
- **REVIEW_RULE_04**: Breaking changes require team discussion
- **REVIEW_RULE_05**: Educational content requires pedagogy review

## Monitoring & Logging Standards

### Logging Format
```go
// REQUIRED: Structured logging
logger.Info("scan initiated",
    "scan_id", scanID,
    "tool", "amass",
    "target", target,
    "user_id", userID,
    "timestamp", time.Now())
```

### Monitoring Metrics
- **Service health**: Uptime, response times, error rates
- **Tool execution**: Success rates, execution times, resource usage
- **User engagement**: Feature usage, completion rates, error frequency
- **Security events**: Failed authentications, suspicious activities

## Educational Content Standards

### Learning Component Requirements
```jsx
const HelpMeLearn = ({ topic, level = "beginner" }) => {
    return (
        <div className="help-me-learn">
            <h3>What is {topic}?</h3>
            <p className="overview">
                {/* Clear, jargon-free explanation */}
            </p>
            
            <h4>Why is this important?</h4>
            <p className="importance">
                {/* Real-world context and importance */}
            </p>
            
            <h4>How does it work?</h4>
            <div className="methodology">
                {/* Step-by-step explanation */}
            </div>
            
            <h4>Try it yourself</h4>
            <div className="practice">
                {/* Interactive examples or exercises */}
            </div>
        </div>
    );
};
```

These rules ensure that the Ars0n Framework v2 maintains high quality, security, and educational value while supporting scalable development practices.# Ars0n Framework v2 - Development Rules

## Core Development Principles

### 1. Security-First Development
- **SECURITY_RULE_01**: All user inputs MUST be validated and sanitized before processing
- **SECURITY_RULE_02**: Never expose internal error messages or stack traces to end users
- **SECURITY_RULE_03**: Use parameterized queries exclusively - no string concatenation for SQL
- **SECURITY_RULE_04**: Store sensitive data (API keys, credentials) in environment variables only
- **SECURITY_RULE_05**: Implement proper access controls and authentication for all endpoints
- **SECURITY_RULE_06**: Log security events and failed authentication attempts
- **SECURITY_RULE_07**: Regular dependency updates and vulnerability scanning required

### 2. Educational Philosophy Integration
- **EDUCATION_RULE_01**: Every security tool integration MUST include educational context
- **EDUCATION_RULE_02**: "Help Me Learn" components required for all major features
- **EDUCATION_RULE_03**: Code comments must explain the "why" not just the "what"
- **EDUCATION_RULE_04**: Error messages should be educational and guide users to solutions
- **EDUCATION_RULE_05**: Documentation must be accessible to security beginners

### 3. Quality Standards
- **QUALITY_RULE_01**: Zero TODOs or placeholders in production code
- **QUALITY_RULE_02**: All functions must have comprehensive error handling
- **QUALITY_RULE_03**: Unit tests required for all utility functions and parsers
- **QUALITY_RULE_04**: Integration tests required for all tool integrations
- **QUALITY_RULE_05**: Code reviews mandatory for all changes
- **QUALITY_RULE_06**: Automated linting and formatting compliance required

## Language-Specific Standards

### Go Backend Standards

#### Code Organization
```go
// Package structure
package main

import (
    // Standard library first
    "context"
    "fmt"
    "net/http"
    
    // Third-party packages
    "github.com/gorilla/mux"
    
    // Local packages
    "./models"
    "./utils"
)
```

#### Function Documentation
```go
// InitiateAmassEnumScan starts an Amass enumeration scan for the given target
// It validates the target, creates a Docker container, and returns the scan ID
// Returns error if target validation fails or container creation fails
func InitiateAmassEnumScan(target string, config AmassConfig) (string, error) {
    // Implementation
}
```

#### Error Handling
```go
// REQUIRED: Structured error handling
func (s *ScanService) ExecuteTool(toolName string, params ToolParams) (*Result, error) {
    if err := s.validateParams(params); err != nil {
        return nil, fmt.Errorf("parameter validation failed: %w", err)
    }
    
    result, err := s.runTool(toolName, params)
    if err != nil {
        // Log error internally
        s.logger.Error("tool execution failed", 
            "tool", toolName, 
            "error", err,
            "params", params)
        
        // Return user-friendly error
        return nil, fmt.Errorf("scan execution failed: %s", getUserFriendlyError(err))
    }
    
    return result, nil
}
```

#### Naming Conventions
- **Functions**: camelCase for private, PascalCase for exported
- **Variables**: camelCase (e.g., `scanResults`, `targetDomain`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `MAX_SCAN_TIMEOUT`)
- **Structs**: PascalCase (e.g., `ScanResult`, `TargetConfig`)
- **Interfaces**: PascalCase with "er" suffix (e.g., `Scanner`, `Parser`)

### React Frontend Standards

#### Component Structure
```jsx
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';

/**
 * ScopeTargetDetails - Displays detailed information about a scope target
 * Includes scan history, asset counts, and ROI analysis
 */
const ScopeTargetDetails = ({ targetId, onUpdate }) => {
    const [targetData, setTargetData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Component logic here

    return (
        <div className="scope-target-details">
            {/* Component JSX */}
        </div>
    );
};

ScopeTargetDetails.propTypes = {
    targetId: PropTypes.string.isRequired,
    onUpdate: PropTypes.func
};

export default ScopeTargetDetails;
```

#### State Management
```jsx
// REQUIRED: Proper state management with error handling
const [state, setState] = useState({
    data: null,
    loading: false,
    error: null
});

const handleAsyncOperation = async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));
    
    try {
        const result = await apiCall();
        setState(prev => ({ ...prev, data: result, loading: false }));
    } catch (error) {
        setState(prev => ({ 
            ...prev, 
            error: error.message, 
            loading: false 
        }));
    }
};
```

#### Naming Conventions
- **Components**: PascalCase (e.g., `AmassEnumConfigModal`)
- **Functions**: camelCase (e.g., `handleScanStart`, `parseResults`)
- **Variables**: camelCase (e.g., `scanStatus`, `targetDomains`)
- **Files**: PascalCase for components, camelCase for utilities

### Python AI Service Standards

#### Function Documentation
```python
def process_security_query(query: str, context: dict) -> dict:
    """
    Process a security-related query using AI models.
    
    Args:
        query (str): The user's security question
        context (dict): Additional context including scan results
        
    Returns:
        dict: Processed response with educational content
        
    Raises:
        ValueError: If query is invalid or context missing
        APIError: If external API calls fail
    """
    # Implementation
```

#### Error Handling
```python
# REQUIRED: Comprehensive error handling
try:
    response = openai_client.create_completion(prompt)
except openai.APIError as e:
    logger.error(f"OpenAI API error: {e}")
    raise AIServiceError("Unable to process query at this time")
except Exception as e:
    logger.error(f"Unexpected error in AI service: {e}")
    raise AIServiceError("Internal service error")
```

## Database Standards

### Schema Design
```sql
-- REQUIRED: Proper indexing and constraints
CREATE TABLE scope_targets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    target_type VARCHAR(50) NOT NULL CHECK (target_type IN ('company', 'wildcard', 'url')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Indexes for performance
    INDEX idx_scope_targets_type (target_type),
    INDEX idx_scope_targets_created (created_at)
);
```

### Query Standards
```go
// REQUIRED: Use parameterized queries
const query = `
    SELECT id, name, target_type, created_at 
    FROM scope_targets 
    WHERE target_type = $1 AND created_at > $2
    ORDER BY created_at DESC
    LIMIT $3
`
rows, err := db.Query(query, targetType, startDate, limit)
```

## API Design Standards

### Endpoint Naming
- **Resources**: Plural nouns (e.g., `/api/targets`, `/api/scans`)
- **Actions**: HTTP verbs (GET, POST, PUT, DELETE)
- **Nested Resources**: Clear hierarchy (e.g., `/api/targets/{id}/scans`)

### Request/Response Format
```json
{
    "status": "success|error",
    "data": {
        // Response payload
    },
    "message": "Human-readable message",
    "timestamp": "2024-12-19T10:30:00Z"
}
```

### Error Responses
```json
{
    "status": "error",
    "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid target format provided",
        "details": {
            "field": "target",
            "provided": "invalid-domain",
            "expected": "Valid domain or IP address"
        }
    },
    "timestamp": "2024-12-19T10:30:00Z"
}
```

## Docker & Container Standards

### Dockerfile Best Practices
```dockerfile
# Use specific version tags
FROM golang:1.21-alpine AS builder

# Create non-root user
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy dependencies first (layer caching)
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build application
RUN CGO_ENABLED=0 GOOS=linux go build -o main .

# Final stage
FROM alpine:latest
RUN adduser -D -s /bin/sh appuser
USER appuser
COPY --from=builder /app/main /app/main
EXPOSE 8080
CMD ["/app/main"]
```

### Container Security
- **CONTAINER_RULE_01**: Always use non-root users in containers
- **CONTAINER_RULE_02**: Use specific version tags, never `latest`
- **CONTAINER_RULE_03**: Minimize container surface area (alpine base images)
- **CONTAINER_RULE_04**: Scan containers for vulnerabilities before deployment
- **CONTAINER_RULE_05**: Use multi-stage builds to reduce final image size

## Testing Standards

### Unit Testing
```go
// REQUIRED: Comprehensive unit tests
func TestValidateTarget(t *testing.T) {
    tests := []struct {
        name    string
        target  string
        wantErr bool
    }{
        {"valid domain", "example.com", false},
        {"valid subdomain", "sub.example.com", false},
        {"invalid format", "not-a-domain", true},
        {"empty target", "", true},
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            err := ValidateTarget(tt.target)
            if (err != nil) != tt.wantErr {
                t.Errorf("ValidateTarget() error = %v, wantErr %v", err, tt.wantErr)
            }
        })
    }
}
```

### Integration Testing
```go
// REQUIRED: Integration tests for tool workflows
func TestAmassIntegration(t *testing.T) {
    // Setup test container
    container := setupTestContainer(t, "amass")
    defer container.Cleanup()
    
    // Test execution
    result, err := ExecuteAmassEnum("test.com", AmassConfig{})
    require.NoError(t, err)
    
    // Verify results
    assert.NotEmpty(t, result.Subdomains)
    assert.Equal(t, "completed", result.Status)
}
```

## Documentation Standards

### Code Documentation
- **DOC_RULE_01**: All exported functions must have documentation comments
- **DOC_RULE_02**: Complex algorithms must include implementation explanations
- **DOC_RULE_03**: API endpoints must include example requests/responses
- **DOC_RULE_04**: Security considerations must be documented
- **DOC_RULE_05**: Educational content must be beginner-friendly

### README Standards
```markdown
# Component Name

## Purpose
Brief description of what this component does and why it exists.

## Usage
Code examples showing how to use the component.

## Configuration
Required environment variables and configuration options.

## Security Considerations
Any security implications or requirements.

## Educational Notes
Background information for learning purposes.
```

## Performance Standards

### Backend Performance
- **PERF_RULE_01**: API endpoints must respond within 2 seconds
- **PERF_RULE_02**: Database queries must be optimized and indexed
- **PERF_RULE_03**: Use connection pooling for database connections
- **PERF_RULE_04**: Implement caching for frequently accessed data
- **PERF_RULE_05**: Monitor and log performance metrics

### Frontend Performance
- **PERF_RULE_06**: Components must load within 1 second
- **PERF_RULE_07**: Implement lazy loading for large datasets
- **PERF_RULE_08**: Optimize bundle size and implement code splitting
- **PERF_RULE_09**: Use React.memo for expensive components
- **PERF_RULE_10**: Minimize re-renders through proper state management

## Security Tool Integration Standards

### Tool Wrapper Pattern
```go
type ToolExecutor interface {
    Execute(params ToolParams) (*ToolResult, error)
    Validate(params ToolParams) error
    Parse(output []byte) (*StructuredResult, error)
}

type AmassExecutor struct {
    docker *DockerClient
    logger *Logger
}

func (a *AmassExecutor) Execute(params ToolParams) (*ToolResult, error) {
    // Validate parameters
    if err := a.Validate(params); err != nil {
        return nil, err
    }
    
    // Execute in container
    output, err := a.docker.Run("amass", params.ToArgs())
    if err != nil {
        return nil, fmt.Errorf("amass execution failed: %w", err)
    }
    
    // Parse results
    structured, err := a.Parse(output)
    if err != nil {
        return nil, fmt.Errorf("result parsing failed: %w", err)
    }
    
    return &ToolResult{
        Raw:        output,
        Structured: structured,
        Status:     "completed",
    }, nil
}
```

### Result Parsing Standards
- **PARSE_RULE_01**: Always preserve raw tool output for debugging
- **PARSE_RULE_02**: Implement robust parsing with error recovery
- **PARSE_RULE_03**: Validate parsed data before database insertion
- **PARSE_RULE_04**: Handle partial results gracefully
- **PARSE_RULE_05**: Include parsing confidence scores when applicable

## Git & Version Control Standards

### Commit Standards
```
type(scope): brief description

Detailed explanation of changes if needed.

- List specific changes
- Reference issues if applicable

Closes #123
```

### Branch Naming
- **feature/**: New features (e.g., `feature/nuclei-integration`)
- **bugfix/**: Bug fixes (e.g., `bugfix/amass-parser-error`)
- **hotfix/**: Critical fixes (e.g., `hotfix/security-vulnerability`)
- **docs/**: Documentation updates (e.g., `docs/api-examples`)

### Code Review Requirements
- **REVIEW_RULE_01**: All changes require at least one review
- **REVIEW_RULE_02**: Security changes require security expert review
- **REVIEW_RULE_03**: Architecture changes require architecture review
- **REVIEW_RULE_04**: Breaking changes require team discussion
- **REVIEW_RULE_05**: Educational content requires pedagogy review

## Monitoring & Logging Standards

### Logging Format
```go
// REQUIRED: Structured logging
logger.Info("scan initiated",
    "scan_id", scanID,
    "tool", "amass",
    "target", target,
    "user_id", userID,
    "timestamp", time.Now())
```

### Monitoring Metrics
- **Service health**: Uptime, response times, error rates
- **Tool execution**: Success rates, execution times, resource usage
- **User engagement**: Feature usage, completion rates, error frequency
- **Security events**: Failed authentications, suspicious activities

## Educational Content Standards

### Learning Component Requirements
```jsx
const HelpMeLearn = ({ topic, level = "beginner" }) => {
    return (
        <div className="help-me-learn">
            <h3>What is {topic}?</h3>
            <p className="overview">
                {/* Clear, jargon-free explanation */}
            </p>
            
            <h4>Why is this important?</h4>
            <p className="importance">
                {/* Real-world context and importance */}
            </p>
            
            <h4>How does it work?</h4>
            <div className="methodology">
                {/* Step-by-step explanation */}
            </div>
            
            <h4>Try it yourself</h4>
            <div className="practice">
                {/* Interactive examples or exercises */}
            </div>
        </div>
    );
};
```

These rules ensure that the Ars0n Framework v2 maintains high quality, security, and educational value while supporting scalable development practices.